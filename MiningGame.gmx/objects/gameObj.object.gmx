<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//the view must be zoomed in a bit on smaller screens.
//view_wview = 800;
//view_hview = 480;
if (os_device != device_tablet /*&amp;&amp; display_get_width() &lt;= 800 &amp;&amp; display_get_height() &lt;= 480*/)
{
    //reduce the view a bit so everything isn't tiny
    view_wview = ceil(display_get_width() * 0.8);
    view_hview = ceil(display_get_height() * 0.8);
}
else
{
    view_wview = display_get_width();
    view_hview = display_get_height();
}
view_wport = view_wview;
view_hport = view_hview;

//this step must be done so that the gui is aligned properly on different devices.
display_set_gui_size(view_wview, view_hview);

show_debug_message("View Height: " + string(view_hview));
show_debug_message("View Width: " + string(view_wview));
show_debug_message("Port Height: " + string(view_hport));
show_debug_message("Port Width: " + string(view_wport));

//grid contains all object instances
//objectGrid = ds_grid_create(ds_grid_width(global.finishedGrid), ds_grid_height(global.finishedGrid));
airReductionRate = 55 + (global.oxygenLevel * 25);      //controls how fast oxygen diminishes.
healthReductionRate = 90;       //3 seconds
airCounter = 0;
healthCounter = 0;
levelModTimer = 0;                   //level mod display timer
gameOver = false;

//booleans for checking bonuses
allRocksCleared = false;
allEnemiesDefeated = false;
displayBonus = false;
displayBonusTimer = 0;                   //bonus display timer.
displayBonusAlpha = 1;
displayBonusPos = 0;
//global.rockCount = 0;


horseshoeCount = 0; //Check inventory for # of horseshoes
activeItems = 0;    //need to track how many items are active so they can be removed later.

//quick save button. NOTE: game should also save if back button or home button is pressed
//saveButton = instance_create(view_xview + 165, view_yview + 723, saveButtonObj);
//recordsButton = instance_create(view_xview + 365, view_yview + 723, recordsButtonObj);  //temporary object


for (var i = 0; i &lt; ds_grid_width(global.finishedGrid); i++)
{
    for (var j = 0; j &lt; ds_grid_height(global.finishedGrid); j++)
    {
        //draw tile on the screen.
        switch (ds_grid_get(global.finishedGrid, i, j))
        {
            case TILE_ROCK:
                //ds_grid_set(global.objectGrid, i, j, instance_create(i * TILE_SIZE, j * TILE_SIZE, rockObj));
                instance_create(i * TILE_SIZE, j * TILE_SIZE, rockObj);
                break;
                
            case TILE_WALL:
                instance_create(i * TILE_SIZE, j * TILE_SIZE, wallObj);
                break;
                
            case TILE_PLAYER:
                player = instance_create(i * TILE_SIZE, j * TILE_SIZE, playerObj);
            
                //ds_grid_set(global.objectGrid, i, j, player);
                break;
                
            case TILE_EXIT:
                //ds_grid_set(global.objectGrid, i, j, instance_create(i * TILE_SIZE, j * TILE_SIZE, exitObj));
                instance_create(i * TILE_SIZE, j * TILE_SIZE, exitObj);
                break;
                
            case TILE_TAR:
                instance_create(i * TILE_SIZE, j * TILE_SIZE, tarObj);
                break;
                
             case TILE_GAS:
                instance_create(i * TILE_SIZE, j * TILE_SIZE, gasObj);
                break;
                
             case TILE_BAT_NO_ROCK:
                instance_create(i * TILE_SIZE, j * TILE_SIZE, batObj);
                break;
                
             case TILE_BAT_ROCK:
                instance_create(i * TILE_SIZE, j * TILE_SIZE, rockObj);
                instance_create(i * TILE_SIZE, j * TILE_SIZE, batObj);
                break;
                
             case TILE_TRAP:
                instance_create(i * TILE_SIZE, j * TILE_SIZE, triggerObj);
                break;
        }
    }
}

//check for any items that should be active
if (ds_list_size(global.inventory) &gt; 0)
{
    var i = 0;
    while (i &lt; ds_list_size(global.inventory))
    {
        switch (ds_list_find_value(global.inventory, i))
        {
            case ITEMID_GASMASK:
                if (!global.gasMaskEnabled)
                {
                    global.gasMaskEnabled = true;
                    activeItems++;
                }
                break;
                
            case ITEMID_REPELLENT:
                if (!global.repellentEnabled)
                {
                    global.repellentEnabled = true;
                    activeItems++;
                }
                break;
                
             case ITEMID_CHARM:
                if (!global.charmEnabled)
                {
                    global.charmEnabled = true;
                    activeItems++;
                }
                break;
                
             case ITEMID_HORSESHOE:
                global.horseshoeEnabled = true;
                horseshoeCount++;
                break;
        }
       
        i++;
    }
}

//create spotlight
/*if (!global.onBonusStage)
{
    instance_create(0, 0, lightObj);
}*/

global.hudInstance = instance_create(0, 0, hudObj);


//adding test bat
//instance_create(player.x + 100, player.y - 30, batObj);

//test cloud
//instance_create(200, 200, gasObj);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.delta = (30 / 1000000) * delta_time;

//saveButton.x = view_xview + 165;
//saveButton.y = view_yview + 723;

//recordsButton.x = view_xview + 365;
//recordsButton.y = view_yview + 723;

if (global.hearts &lt;= 0 &amp;&amp; !gameOver)
{
    //does player have a horseshoe?
    if (global.horseshoeEnabled)
    {
        global.hearts = 3;
        
        //destroy horseshoe
        var i = 0;
        var horseshoeFound = false;
        while (i &lt; ds_list_size(global.inventory) &amp;&amp; !horseshoeFound)
        {
            if (ds_list_find_value(global.inventory, i) == ITEMID_HORSESHOE)
            {
                ds_list_delete(global.inventory, i);
                horseshoeFound = true;
                horseshoeCount--;
            }
            else
            {
                i++;
            }
        }
        
        if (horseshoeCount &lt;= 0)
        {
            global.horseshoeEnabled = false;
        }
    }
    else
    {
        gameOver = true;
        with (global.hudInstance)
        {
            instance_destroy();
        }
        instance_create(0, 0, gameOverObj);
    }
}

//reduce oxygen. Does not apply if on bonus stage.
if (!instance_exists(pauseMenuObj))
{
    if (global.oxygen &gt; 0)
    {
        if (!global.onBonusStage &amp;&amp; global.oxygenDecreasing)
        {
            airCounter += 1 + global.airReduceMod;
            if (airCounter &gt; airReductionRate)
            {
                airCounter = 0;
                global.oxygen--;
            }
        }
    }
    else if (global.hearts &gt; 0)
    {
        //player starts losing health
        healthCounter++;
        if (healthCounter &gt; healthReductionRate)
        {
            healthCounter = 0;
            global.hearts--;
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check for bonuses</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//NOTE: Bonuses are never applied on a bonus stage!

if (!global.onBonusStage)
{
    if (!allRocksCleared &amp;&amp; global.rockCount &lt;= 0)
    {
        global.cashBonus += 10000 * global.tier;
        global.oxygenBonus += 20;
        allRocksCleared = true;
        displayBonus = true;
        displayBonusPos = player.y - 20;
        displayBonusTimer = 0;
        displayBonusAlpha = 1;
    }
    
    if (global.enemiesSpawned)
    {
        if(!allEnemiesDefeated &amp;&amp; global.enemyCount &lt;= 0)
        {
            allEnemiesDefeated = true;
            global.heartBonus += 1;
            global.cashBonus += 1000 * global.tier;
            displayBonus = true;
            displayBonusPos = player.y - 20;
            displayBonusTimer = 0;
            displayBonusAlpha = 1;
        }
    }
}
else
{
    global.oxygenBonus = 0;
    global.heartBonus = 0;
    global.cashBonus = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Update level grid</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//update grid. This is so that when the player resumes from a quick save, the level is how they left it,
//minus any missed minerals.
ds_grid_set(global.finishedGrid, floor(player.x / TILE_SIZE), floor(player.y / TILE_SIZE), TILE_EMPTY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//move player
/*if (device_mouse_check_button(0, mb_left))
{
    //avatar moves and follows touched location as long as there's no obstruction. 
    //The avatar should not be able to catch up to the touch unless they're reaching the edge of the screen.
    if (device_mouse_x(0) - (player.sprite_width / 2) &gt; player.x)
    {
        player.x += MOVE_SPEED;
    }
    
    if (device_mouse_x(0) - (player.sprite_width / 2) &lt; player.x)
    {
        player.x -= MOVE_SPEED;
    }
    
    if (device_mouse_y(0) - (player.sprite_height / 2) &gt; player.y)
    {
        player.y += MOVE_SPEED;
    }
    
    if (device_mouse_y(0) - (player.sprite_height / 2) &lt; player.y)
    {
        player.y -= MOVE_SPEED;
    }
     
}*/

if (!gameOver &amp;&amp; !instance_exists(pauseMenuObj))
{
    if (device_mouse_check_button_pressed(0, mb_left))
    {
        global.locationSet = true;
        
        
        //set the location to a value that's a multiple of 64.
        if (mouse_x % TILE_SIZE != 0)
        {
            var remainder = mouse_x % TILE_SIZE;
            global.locationX = floor(mouse_x - remainder);
        }
        else
        {
            global.locationX = mouse_x;
        }
        
        if (mouse_y % TILE_SIZE != 0)
        {
            var remainder = mouse_y % TILE_SIZE;
            global.locationY = floor(mouse_y - remainder);
        }
        else
        {
            global.locationY = mouse_y;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Display bonus timer update</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(pauseMenuObj))
{
    if (displayBonus)
    {
        displayBonusTimer++;
        displayBonusPos--;
        if (displayBonusTimer &gt; 30)
        {
            displayBonusAlpha -= 0.05;
            if (displayBonusAlpha &lt;= 0)
            {
                displayBonus = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Save button</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creates a save file that gets deleted when the player resumes their game.
/*if (!instance_exists(screenFadeObj) &amp;&amp; !instance_exists(resultsObj) &amp;&amp; !gameOver)
{
    if (device_mouse_check_button_pressed(0, mb_left))
    {
        if (mouse_x &gt;= saveButton.x &amp;&amp; mouse_x &lt;= saveButton.x + saveButton.sprite_width)
        {
            if (mouse_y &gt;= saveButton.y &amp;&amp; mouse_y &lt;= saveButton.y + saveButton.sprite_height)
            {
                script_execute(writeQuickSaveFile, player.x, player.y, room_width, room_height);
                game_end(); //NOTE! Cannot use this in iOS or Windows 8.
            }    
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Remove any active items</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_list_size(global.inventory) &gt; 0)
{
    var i = 0;
    
    while (ds_list_size(global.inventory) &gt; 0 &amp;&amp; activeItems &gt; 0)
    {
        switch (ds_list_find_value(global.inventory, 0))
        {
            case ITEMID_GASMASK:
                if (global.gasMaskEnabled)
                {
                    ds_list_delete(global.inventory, 0);
                    global.gasMaskEnabled = false;
                    activeItems--;
                    show_debug_message("Destroying gas mask");
                }
                break;
                
            case ITEMID_REPELLENT:
                if (global.repellentEnabled)
                {
                    ds_list_delete(global.inventory, 0);
                    global.repellentEnabled = false;
                    activeItems--;
                    show_debug_message("Destroying repellent");
                }
                break;
                
             case ITEMID_CHARM:
                if (global.charmEnabled)
                {
                    ds_list_delete(global.inventory, 0);
                    global.charmEnabled = false;
                    activeItems--;
                    show_debug_message("Destroying charm");
                }
                break;
        }
        
        //i++;
    }
}

show_debug_message("Items left in inventory: " + string(ds_list_size(global.inventory)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//memory cleanup

/*if (ds_exists(objectGrid, ds_type_grid))
{
    ds_grid_destroy(objectGrid);
}*/

if (ds_exists(global.mapGrid, ds_type_grid))
{
    ds_grid_destroy(global.mapGrid);
}

if (ds_exists(global.finishedGrid, ds_type_grid))
{
    ds_grid_destroy(global.finishedGrid);
}

if (ds_exists(global.aStarGrid, ds_type_grid))
{
    ds_grid_destroy(global.aStarGrid);
}

if (ds_exists(global.inventory, ds_type_list))
{
    ds_list_destroy(global.inventory);
}


/*if (ds_exists(global.objectGrid, ds_type_grid))
{
    ds_grid_destroy(global.objectGrid);
}*/


if (part_system_exists(global.particleSystem))
{
    part_system_destroy(global.particleSystem);
}

if (part_type_exists(global.dirtPart))
{
    part_type_destroy(global.dirtPart);
}

if (part_type_exists(global.sparkPart))
{
    part_type_destroy(global.sparkPart);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_font(gameScreenFont);
draw_set_colour(c_white);

//stats
draw_text(20, 0, "Life: " + string(global.hearts) + "/" + string(global.currentMaxHearts));
draw_text(80, 0, "Oxygen: " + string(global.oxygen) + "%");
draw_text(190, 0, "Floor B" + string(global.level));
draw_text(500, 0, "Pickaxe Lv " + string(global.pickaxeLevel));
draw_text(600, 0, "Tank LV " + string(global.oxygenLevel));
draw_text(700, 0, "Heart LV " + string(global.heartLevel));
draw_text(800, 0, "Lantern LV " + string(global.lanternLevel));
draw_text(view_wview / 2, view_hview - 48, "$" + string(global.cash));

//level mod message display
if (global.levelModded)
{
    draw_set_font(levelModFont);
    draw_text_colour(floor(view_wview / 3) - string_length(global.levelModAlert), floor(view_hview / 4), global.levelModAlert, c_lime, c_lime, c_white, c_white, levelModDisplayAlpha);
}*/

if (displayBonus)
{
    draw_set_font(gameScreenFont);
    draw_text_colour(player.x, displayBonusPos, "Bonus Achieved!", c_lime, c_lime, c_lime, c_lime, displayBonusAlpha);
}

//display active items
/*var activeItemDisplayMsg = view_hview - 80;

draw_set_colour(c_lime);
if (gasMaskActive)
{
    draw_text(80, activeItemDisplayMsg, "Gas Mask active!");
    activeItemDisplayMsg -= 16;
}

if (repellentActive)
{
    draw_text(80, activeItemDisplayMsg, "Repellent active!");
    activeItemDisplayMsg -= 16;
}

if (charmActive)
{
    draw_text(80, activeItemDisplayMsg, "Charm active!");
    activeItemDisplayMsg -= 16;
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Debug</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug_mode)
{
    draw_set_font(gameScreenFont);
    draw_set_colour(c_white);
    draw_text(30, 700, "--Active Items go here--");     //placeholder
    draw_text(20, 20, "Seed: " + string(random_get_seed()));
    draw_text(view_wview - 60, 20, string(fps) + "FPS");
    draw_text(20, 40, "Tier " + string(global.tier));
    draw_text(20, 60, "Map Size: &lt;" + string(room_width) + ", " + string(room_height) + "&gt;");
    draw_text(20, 80, "Screen tapped? " + string(global.locationSet));
    draw_text(20, 100, "Last Tap Location: &lt;" + string(global.locationX) + ", " + string(global.locationY) + "&gt;");
    draw_text(20, 120, "Delta: " + string(global.delta));
    draw_text(20, 140, "Bonus Stage Rate: " + string((0.05 + global.bonusRateMod) * 100) + "%");
    draw_text(20, 160, "Level Mod Rate: " + string((0.25 + global.tier * 0.02) * 100) + "%");
    draw_text(20, 180, "Air Reduction " + string(airCounter) + "/" + string(airReductionRate));
    draw_text(20, 200, "Heart Reduction " + string(healthCounter) + "/" + string(healthReductionRate));
    draw_text(20, 220, "Rock Count: " + string(global.rockCount));
    draw_text(20, 240, "Move Speed Mod: " + string(global.moveSpeedMod));
    draw_text(20, 260, "Air Reduce Mod: " + string(global.airReduceMod));
    
    //rock Hit Points display
    /*for (var i = 0; i &lt; ds_grid_width(global.rockHealthGrid); i++)
    {
        for (var j = 0; j &lt; ds_grid_height(global.rockHealthGrid); j++)
        {
            draw_text_colour(i * TILE_SIZE + (TILE_SIZE / 2) - view_xview, j * TILE_SIZE + (TILE_SIZE / 2) - view_yview, 
                ds_grid_get(global.rockHealthGrid, i, j), c_white, c_white, c_white, c_white, 0.5);
        }
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.pickaxeLevel++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.oxygenLevel++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.lanternLevel++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.heartLevel++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*delete from inventory*/
var i = ds_list_size(global.inventory) - 1;
//if( i &gt; 0){
    
//}
instance_deactivate_object( ds_list_find_value(global.inventory, i) );
ds_list_delete(global.inventory, i);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*add to inventory*/
var i = ds_list_size(global.inventory);
if( i &lt; 5){
    switch( ceil(random(5))){
        case 1:
            ds_list_add(global.inventory, instance_create(random(300), random(300), charm));
            break;
        case 2:
            ds_list_add(global.inventory, instance_create(random(300), random(300), dummy));
            break;
        case 3:
            ds_list_add(global.inventory, instance_create(random(300), random(300), explosives));
            break;
        case 4:
            ds_list_add(global.inventory, instance_create(random(300), random(300), mask));
            break;
        case 5:
            ds_list_add(global.inventory, instance_create(random(300), random(300), repellent));
            break;
    }

    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!gameOver &amp;&amp; !instance_exists(pauseMenuObj) &amp;&amp; !instance_exists(resultsObj))
{
    instance_create(view_xview, view_yview, pauseMenuObj);
    show_debug_message("Pause Menu open");
}
//game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
