<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The game over message drops from above, and bounces once it reaches a certain height.

gameOverMsg = "GAME OVER";
yPos = -100;
cashXPos = -200;
floorXPos = -300;
velocity = 8;
bounceVelocity = velocity * 0.8;
msgGravity = 0.3;
showResults = false;

promptAlpha = 0;
deltaAlpha = 0.05;

//convert remaining cash into miner coins.
script_execute(convertCashTotal);

//check leaderboards if scores need to be updated
var levelArray = 0;
var cashArray = 0;

var file = working_directory + "leaderboarddata.ini";
if (!file_exists(file))
{
    //create &amp; initialize file
    script_execute(createLeaderboard);
}

ini_open(file);

for (var i = 0; i &lt; 10; i++)
{
    levelArray[i] = ini_read_real("LowestLevel", "rank" + string(i + 1), 1);
    cashArray[i] = ini_read_real("TotalCash", "rank" + string(i + 1), 1000);
}

//compare current level and cash against corresponding array values
var hiScoreFound = false;
var i = 0;
while (!hiScoreFound &amp;&amp; i &lt; array_length_1d(levelArray))
{
    var temp = levelArray[i];
    
    if (global.level &gt; levelArray[i])
    {
        levelArray[i] = global.level;
        hiScoreFound = true;
        
        //shift the other scores down
        var temp2 = 0;
        for (var j = i + 1; j &lt; array_length_1d(levelArray); j++)
        {
            temp2 = levelArray[j];
            levelArray[j] = temp;
            						temp = temp2;
        }       
    }
    else
    {
        i++;
    }
    
}

//same procedure for cash
hiScoreFound = false;
i = 0;
while (!hiScoreFound &amp;&amp; i &lt; array_length_1d(cashArray))
{
    var temp = cashArray[i];
    
    if (global.currentTotalCash &gt; cashArray[i])
    {
        cashArray[i] = global.currentTotalCash;
        hiScoreFound = true;
        
        //shift the other scores down
        var temp2 = 0;
        for (var j = i + 1; j &lt; array_length_1d(cashArray); j++)
        {
            temp2 = cashArray[j];
            cashArray[j] = temp;
            						temp = temp2;
        }       
    }
    else
    {
        i++;
    }
    
}



//write updated arrays to file
for (var k = 0; k &lt; 10; k++)
{
    ini_write_real("LowestLevel", "rank" + string(k + 1), levelArray[k]);
    ini_write_real("TotalCash", "rank" + string(k + 1), cashArray[k]);
}


ini_close();
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!showResults)
{
    velocity += msgGravity;
    yPos += velocity;
    if (yPos &gt; room_height / 3 - view_yview)
    {
        if (abs(bounceVelocity) &lt; 0.5)
        {
            //stop moving, since bounce will never be exactly 0.
            yPos = room_height / 3 - view_yview;
            showResults = true;
        }
        else
        {
            //bounce
            velocity = -bounceVelocity;
            bounceVelocity *= 0.7;
        }
    }
}
else
{
    //display results, such as money collected, # of floors cleared, etc.\
    cashXPos = lerp(cashXPos, room_width / 2.5 - view_xview, 0.1);
    floorXPos = lerp(floorXPos, room_width / 2.5 - view_xview, 0.1);
    
    promptAlpha += deltaAlpha;
    if (promptAlpha &gt;= 1 || promptAlpha &lt;= 0)
    {
        deltaAlpha *= -1;
    }
    
    //check for a tap
    if (!instance_exists(screenFadeObj))
    {
        if (device_mouse_check_button_pressed(0, mb_left))
        {
            //restart game
            global.nextScreen = loadScreen;
            instance_create(view_xview, view_yview, screenFadeObj);
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(resetGame);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(levelModFont);
draw_text_colour(room_width / 3 - view_xview, yPos, gameOverMsg, c_red, c_red, c_red, c_red, 1);

draw_set_font(gameScreenFont);
draw_set_colour(c_white);
draw_text(cashXPos, room_height / 2 - view_yview, "Total Cash $" + string(global.currentTotalCash));
draw_text(floorXPos, room_height / 2 - view_yview + 40, string(global.level - 1) + " floors cleared");
draw_text_colour(room_width / 2.5 - view_xview, room_height / 2 - view_yview + 160, "Tap screen to restart!", c_yellow, c_yellow, c_yellow, c_yellow, promptAlpha);  
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
