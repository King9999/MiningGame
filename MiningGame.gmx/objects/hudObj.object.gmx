<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>levelModDisplayAlpha = 1;       //used to fade level mod alert over time.
levelModTimer = 0;                   //display timer

//hearts
/*heartList = ds_list_create();

for (var i = 0; i &lt; global.currentMaxHearts; i++)
{
    ds_list_add(heartList, instance_create(view_xview + 30 + (i * 24), 0, heartIconObj));
    
    //check if the current heart should be empty
    if (i &gt;= global.hearts)
    {
        with (ds_list_find_value(heartList, i))
        {
            image_index = 1;
        }
    }
}*/

//stairs
//stairsIcon = instance_create(view_xview + 190, view_yview, stairsIconObj);

//coin
//coinIcon = instance_create(view_xview / 2, view_yview - 48, coinIconObj);
//coinIcon.x -= coinIcon.sprite_width / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//in this event, I remove objects so they aren't shown when player clears the level
//or gets a game over.
/*if (ds_exists(heartList, ds_type_list))
{
    var i = 0;
    while(i &lt; ds_list_size(heartList))
    {
        with (ds_list_find_value(heartList, i))
        {
            instance_destroy();
        }
        i++;
    }
    ds_list_destroy(heartList);
    show_debug_message("Removing heart list");
}

with (stairsIcon)
{
    instance_destroy();
}

with (coinIcon)
{
    instance_destroy();
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//level mod display
if (global.levelModded &amp;&amp; !global.inRestArea)
{
    levelModTimer++;
    show_debug_message("mod timer = " + string(levelModTimer));
    if (levelModTimer &gt; 150)
    {
        levelModDisplayAlpha -= 0.05;
        if (levelModDisplayAlpha &lt;= 0)
        {
            global.levelModded = false;
            global.levelModAlert = "";
        }
    }
}

//check if there's a change in player's health and display empty hearts where necessary.
/*if (global.hearts &lt; global.currentMaxHearts)
{
    //ds_list_clear(heartList);
    //var diff = global.currentMaxHearts - global.hearts;
    
    for (var i = 0; i &lt; global.currentMaxHearts; i++)
    {
        if (i &gt;= global.hearts) //is the heart at i empty?
        {
            with (ds_list_find_value(heartList, i))
            {
                image_index = 1;
            }
        }
        else
        {
            with (ds_list_find_value(heartList, i))
            {
                image_index = 0;
            }
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HUD position update</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*stairsIcon.x = view_xview + 190;

coinIcon.x = view_xview / 2;
coinIcon.y = view_yview - 48;

for (var i = 0; i &lt; global.currentMaxHearts; i++)
{
    with (ds_list_find_value(heartList, i))
    {
        x = view_xview + 30 + (i * 24);
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (ds_exists(heartList, ds_type_list))
{
    ds_list_destroy(heartList);
    show_debug_message("Removing heart list");
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(gameScreenFont);
draw_set_colour(c_white);

//stats
//draw_text(20, 0, "Life: " + string(global.hearts) + "/" + string(global.currentMaxHearts));
//draw_text(110, 0, string(global.oxygen) + "%");
draw_text(210, 0, "B" + string(global.level));
draw_text(250, 0, "Pickaxe Lv " + string(global.pickaxeLevel));
draw_text(350, 0, "Tank LV " + string(global.oxygenLevel));
draw_text(440, 0, "Heart LV " + string(global.heartLevel));
draw_text(520, 0, "Lantern LV " + string(global.lanternLevel));
draw_text(view_wview / 2 + 15, view_hview - 48, string(global.cash));

//level mod message display
if (global.levelModded)
{
    draw_set_font(levelModFont);
    draw_text_colour(floor(view_wview / 3) - string_length(global.levelModAlert), floor(view_hview / 4), global.levelModAlert, c_lime, c_lime, c_white, c_white, levelModDisplayAlpha);
}

draw_set_font(gameScreenFont);
if (global.oxygen &gt; 20)
{
    draw_set_colour(c_white);
    draw_text(140, 0, string(global.oxygen) + "%");
}
else
{
    //danger!
    draw_set_colour(c_red);
    draw_text(140, 0, string(global.oxygen) + "%");
}

/******icons******/

//hearts
var heartRowPos = 0;
var heartColPos = 0;
var newRow = false;
for (var i = 0; i &lt; global.currentMaxHearts; i++)
{
    if (i &gt; 3 &amp;&amp; !newRow)
    {
        heartRowPos = 24;
        heartColPos = 0;
        newRow = true;
    }
    if (i &gt;= global.hearts)
    {
        draw_sprite(heart, 1, 30 + (heartColPos * 24), heartRowPos);
    }
    else
    {
        draw_sprite(heart, 0, 30 + (heartColPos * 24), heartRowPos);
    }
    heartColPos++;
}

//stairs
draw_sprite(stairs_icon, 0, 190, 0);

//coin
draw_sprite(coin, 0, view_wview / 2 - 12, view_hview - 48);

//items
/*var itemPos = 0;        //used to display items in a row

if (global.gasMaskEnabled)
{
    draw_sprite(gasmask, 0, itemPos, view_hview - 32);
    itemPos += 40;
}

if (global.dummyEnabled)
{
    draw_sprite(horseshoe, 0, itemPos, view_hview - 32);    //missing proper sprite
    itemPos += 40;
}

if (global.repellentEnabled)
{
    draw_sprite(repellent, 0, itemPos, view_hview - 32);
    itemPos += 40;
}

if (global.charmEnabled)
{
    draw_sprite(horseshoe, 0, itemPos, view_hview - 32);
    itemPos += 40;
}*/

//display inventory
/*draw_set_colour(c_white);
draw_text(80, view_hview - 64, "--BACKPACK--");

for (var i = 0; i &lt; MAX_ITEMS; i++)
{
    //space where items should go
    draw_rectangle((i * 32) + 80, view_hview - 48, (i * 32) + 112, view_hview - 48 + 32, 1);
}

if(ds_list_size(global.inventory) &gt; 0)
{
    var i = 0;
    var itemPos = 80;   
    while (i &lt; ds_list_size(global.inventory))
    {
        switch(ds_list_find_value(global.inventory, i))
        {
            case ITEMID_GASMASK: //gas mask
                draw_sprite(gasmask, 0, (i * 32) + itemPos, view_hview - 48);
                break;
                
            case ITEMID_REPELLENT: //repellent
                draw_sprite(repellent, 0, (i * 32) + itemPos, view_hview - 48);
                break;
                
            case ITEMID_HORSESHOE: //horseshoe
                draw_sprite(horseshoe, 0, (i * 32) + itemPos, view_hview - 48);
                break;
                
            case ITEMID_CHARM: //charm
                draw_sprite(charm, 0, (i * 32) + itemPos, view_hview - 48);
                break;
        }
        
        i++;
    }
    
    //display active items
    var activeItemDisplayMsg = view_hview - 80;
    
    draw_set_colour(c_lime);
    if (global.gasMaskEnabled)
    {
        draw_text(80, activeItemDisplayMsg, "Gas Mask active!");
        activeItemDisplayMsg -= 16;
    }
    
    if (global.repellentEnabled)
    {
        draw_text(80, activeItemDisplayMsg, "Repellent active!");
        activeItemDisplayMsg -= 16;
    }
    
    if (global.charmEnabled)
    {
        draw_text(80, activeItemDisplayMsg, "Charm active!");
        activeItemDisplayMsg -= 16;
    }
    
}*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.hearts &lt; global.currentMaxHearts)
{
    global.hearts++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.hearts &gt; 0)
{
    global.hearts--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
