<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>miner_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//image_speed = 0.5;
image_delay = 0;
current_image = 0;
facing_direction = global.down;
current_frame = 0;

animSpeed = 0.15;

dmgTimer = 0;       //used to control how fast a rock's HP depletes. Starts at 15 so that rock immediately loses HP on first hit.
timeLimit = 10;

condMsg = "Close Call!";
exitTouched = false;
condMsgPos = y - 20;            //position of condition message
alarm[0] = 0;                   //timer to display condition message
condAlpha = 1;

stepCounter = 0;                    //tracks number of player steps. Resets when it reaches 5.

//colours
skyBlue = make_colour_rgb(100, 229, 255);

invulLimit = 45;    //number of i-frames
invulTimer = invulLimit;

inShop = false;     //used to prevent shop from opening until player is not colliding with shopkeeper any more.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Is player dead?</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (global.hearts &lt;= 0)
{
    instance_destroy();
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check if player stops moving</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(pauseMenuObj))
{
    if (global.locationSet)
    {
        //if (x == global.locationX - (sprite_width / 2) &amp;&amp; y == global.locationY - (sprite_height / 2))
        if (x == global.locationX &amp;&amp; y == global.locationY)
        {
            global.locationSet = false;
            image_speed = 0;
            image_index = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Reset move speed &amp; air reduce mod</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!place_meeting(x, y, tarObj))
{
    global.moveSpeedMod = 1;
}

if (!place_meeting(x, y, gasObj))
{
    global.airReduceMod = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check if player is colliding with shopkeeper</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!place_meeting(x, y, shopkeepObj))
{
    inShop = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement + Collision Check</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//move player and check for collision along the way.  NOTE: The order of collision checking is important! The player can get stuck in rocks
//when moving in certain directions otherwise.
if (!instance_exists(pauseMenuObj))
{
    if (global.hearts &gt; 0)
    {
        if (!place_meeting(x, y, exitObj) &amp;&amp; global.locationSet)
        {
            //avatar moves and follows touched location as long as there's no obstruction. 
            //The avatar should not be able to catch up to the touch unless they're reaching the edge of the screen.
            if (x &lt; global.locationX)
            {
                var rockInstance = instance_place(x + MOVE_SPEED, y, rockObj);
                var wallInstance = instance_place(x + MOVE_SPEED, y, wallObj);
                if (rockInstance == noone &amp;&amp; wallInstance == noone)
                {
                    dmgTimer = 0;
                    x += MOVE_SPEED * global.moveSpeedMod; //* global.delta;              
                    facing_direction = global.right;
                    //sprite_index = miner_right;
                    image_speed = animSpeed;
                    
                    //step check
                    stepCounter = script_execute(stepCheck, x, stepCounter);
                }
                else if (rockInstance != noone)
                {
                    //sprite_index = miner_right; //ensures that avatar faces the rock he's hitting
                    facing_direction = global.right;
                    image_speed = animSpeed;
                    dmgTimer += 1 * global.delta;
                    if (dmgTimer &gt; timeLimit)
                    {
                        with(rockInstance)
                        {
                            part_particles_create(global.particleSystem, rockInstance.x + (TILE_SIZE / 2), rockInstance.y + (TILE_SIZE / 2), global.sparkPart, 8);
                            rockInstance.hp -= global.pickaxeLevel;
                            
                            if (rockInstance.hp &lt;= 0)
                            {
                                part_particles_create(global.particleSystem, rockInstance.x + (TILE_SIZE / 2), rockInstance.y + (TILE_SIZE / 2), global.dirtPart, 20);
                                script_execute(checkMineral, rockInstance.x + (TILE_SIZE / 2) - 16, rockInstance.y + (TILE_SIZE / 2) - 16);
                                instance_destroy(); 
                                global.rockCount--;                      
                            }
                        }
                        dmgTimer = 0;
                    }
                    
                }
                else if (wallInstance != noone)
                {
                    //player is bumping into a wall; move them
                    /*var anotherWall = instance_place(x + MOVE_SPEED, y + MOVE_SPEED, wallObj);
                    if (anotherWall != noone)
                    {
                        y -= MOVE_SPEED;
                    }
                    else
                    {
                        y += MOVE_SPEED;
                    }*/
                    
                }
              
            }
            
            if (y &gt; global.locationY)
            {
                var rockInstance = instance_place(x, y - MOVE_SPEED, rockObj);
                var wallInstance = instance_place(x, y - MOVE_SPEED, wallObj);
                if (rockInstance == noone &amp;&amp; wallInstance == noone)
                {
                    y -= MOVE_SPEED * global.moveSpeedMod;// * global.delta;
                    dmgTimer = 0;
                    facing_direction = global.up
                    image_speed = animSpeed;
                    
                    //step check
                   stepCounter = script_execute(stepCheck, y, stepCounter);
                }
                else if (rockInstance != noone)
                {   
                    facing_direction = global.up;
                    image_speed = animSpeed;      
                    dmgTimer += 1 * global.delta;
                    if (dmgTimer &gt; timeLimit)
                    {
                        with(rockInstance)
                        {
                            part_particles_create(global.particleSystem, rockInstance.x + (TILE_SIZE / 2), rockInstance.y + (TILE_SIZE / 2), global.sparkPart, 8);
                            rockInstance.hp -= global.pickaxeLevel;
                            
                            if (rockInstance.hp &lt;= 0)
                            {
                                part_particles_create(global.particleSystem, rockInstance.x + (TILE_SIZE / 2), rockInstance.y + (TILE_SIZE / 2), global.dirtPart, 20);
                                script_execute(checkMineral, rockInstance.x + (TILE_SIZE / 2) - 16, rockInstance.y + (TILE_SIZE / 2) - 16);
                                instance_destroy(); 
                                global.rockCount--;                      
                            }
                        }
                        dmgTimer = 0;
                    }         
                }      
            }
            
            if (x &gt; global.locationX)
            {
                var rockInstance = instance_place(x - MOVE_SPEED, y, rockObj);
                var wallInstance = instance_place(x - MOVE_SPEED, y, wallObj);
                if (rockInstance == noone &amp;&amp; wallInstance == noone)
                {
                    x -= MOVE_SPEED * global.moveSpeedMod; //* global.delta;
                    dmgTimer = 0;
                    facing_direction = global.left;
                    image_speed = animSpeed;
                    
                    //step check
                    stepCounter = script_execute(stepCheck, x, stepCounter);
                }
                else if (rockInstance != noone)
                {   
                    facing_direction = global.left;
                    image_speed = animSpeed;      
                    dmgTimer += 1 * global.delta;
                    if (dmgTimer &gt; timeLimit)
                    {
                        with(rockInstance)
                        {
                            part_particles_create(global.particleSystem, rockInstance.x + (TILE_SIZE / 2), rockInstance.y + (TILE_SIZE / 2), global.sparkPart, 8);
                            rockInstance.hp -= global.pickaxeLevel;
                            
                            if (rockInstance.hp &lt;= 0)
                            {
                                part_particles_create(global.particleSystem, rockInstance.x + (TILE_SIZE / 2), rockInstance.y + (TILE_SIZE / 2), global.dirtPart, 20);
                                script_execute(checkMineral, rockInstance.x + (TILE_SIZE / 2) - 16, rockInstance.y + (TILE_SIZE / 2) - 16);
                                instance_destroy(); 
                                global.rockCount--;                      
                            }
                        }
                        dmgTimer = 0;
                    }
                   
                }
            }
            
                
            if (y &lt; global.locationY)
            {
                var rockInstance = instance_place(x, y + MOVE_SPEED, rockObj);
                var wallInstance = instance_place(x, y + MOVE_SPEED, wallObj);
                if (rockInstance == noone &amp;&amp; wallInstance == noone)
                {
                     dmgTimer = 0;
                     y += MOVE_SPEED * global.moveSpeedMod;// * global.delta;
                     facing_direction = global.down;
                     image_speed = animSpeed;
                     
                     stepCounter = script_execute(stepCheck, y, stepCounter);
                }
                else if (rockInstance != noone)
                {   
                     facing_direction = global.down;
                     image_speed = animSpeed;      
                    dmgTimer += 1 * global.delta;
                    if (dmgTimer &gt; timeLimit)
                    {
                        with(rockInstance)
                        {
                            part_particles_create(global.particleSystem, rockInstance.x + (TILE_SIZE / 2), rockInstance.y + (TILE_SIZE / 2), global.sparkPart, 8);
                            rockInstance.hp -= global.pickaxeLevel;
                            
                            if (rockInstance.hp &lt;= 0)
                            {
                                part_particles_create(global.particleSystem, rockInstance.x + (TILE_SIZE / 2), rockInstance.y + (TILE_SIZE / 2), global.dirtPart, 20);
                                script_execute(checkMineral, rockInstance.x + (TILE_SIZE / 2) - 16, rockInstance.y + (TILE_SIZE / 2) - 16);
                                instance_destroy(); 
                                global.rockCount--;                      
                            }
                        }
                        dmgTimer = 0;
                    }         
                }      
            }
            
          
            
            //check for diagonal movement
            if (x &gt; global.locationX &amp;&amp; y &gt; global.locationY)
            {
                facing_direction = global.upLeft;
                image_speed = animSpeed;
            }   
            
            if (x &lt; global.locationX &amp;&amp; y &lt; global.locationY)
            {
                facing_direction = global.upRight;
                image_speed = animSpeed;
            }
            
            if (x &gt; global.locationX &amp;&amp; y &lt; global.locationY)
            {
                facing_direction = global.downLeft;
                image_speed = animSpeed;
            }
            
            if (x &lt; global.locationX &amp;&amp; y &gt; global.locationY)
            {
                facing_direction = global.downRight;
                image_speed = animSpeed;
            }
            
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(pauseMenuObj))
{
    if (global.hearts &gt; 0)
    {
        if (!place_meeting(x, y, exitObj) &amp;&amp; global.locationSet)
        {
            //check the A* grid to determine where player should move
            if (x &lt; global.locationX)
            {
                //check up, down, right, up-right, and down-right
                var gridCol = floor(x / TILE_SIZE);
                var gridRow = floor(y / TILE_SIZE); //player's location in grid
                
                var cost = ds_grid_get(global.aStarGrid, gridCol, gridRow);
                //show_debug_message("A* grid value at location: [" + string(gridCol) + ", " + string(gridRow) + "] = " + string(cost));
                
                var upCost = ds_grid_get(global.aStarGrid, gridCol, gridRow - 1);
                var downCost = ds_grid_get(global.aStarGrid, gridCol, gridRow + 1);
                var rightCost = ds_grid_get(global.aStarGrid, gridCol + 1, gridRow);
                var downRightCost = ds_grid_get(global.aStarGrid, gridCol + 1, gridRow + 1);
                var upRightCost = ds_grid_get(global.aStarGrid, gridCol + 1, gridRow - 1);
                
                /*if (rightCost == 0)
                {
                    x += MOVE_SPEED;
                    sprite_index = miner_right;
                    image_speed = animSpeed;
                    dmgTimer = 0;
                    stepCounter = script_execute(stepCheck, x, stepCounter);
                }
                else if (downCost == 0)*/
                
                
                var lowestCostFound = false;
                var targetCol = 0;
                var targetRow = 0;
                
                var col = gridCol;
                var row = gridRow - 1;
                
                while (!lowestCostFound &amp;&amp; col &lt; gridCol + 2)
                {
                    //for (var col = gridCol; col &lt; gridCol + 2; col++)
                    //{
                        //for (var row = gridRow - 1; row &lt; gridRow + 2; row++)
                        //{
                            if (ds_grid_get(global.aStarGrid, col, row) == 0 &amp;&amp; col != gridCol &amp;&amp; row != gridRow)
                            {
                                lowestCostFound = true;
                                targetCol = col;
                                targetRow = row;
                            }
                            else
                            {
                                row++;
                                if (row &gt;= gridRow + 2)
                                {
                                    row = gridRow - 1;
                                    col++;
                                }
                            }
                        //}
                    //}
                }
                
                if (lowestCostFound)
                {
                    var directionX = 1;
                    var directionY = 1;
                    
                    if (targetCol &lt; 0)
                    {
                        directionX = -1;
                    }
                }
                
                
                /*for (var i = gridCol; i &lt; gridCol + 2; i++)
                {
                    for (var j = gridRow - 1; j &lt; gridRow + 2; j++)
                    {
                        if (
                    }
                }*/
                
                /*show_debug_message("Up cost: " + string(upCost));
                show_debug_message("Down cost: " + string(downCost));
                show_debug_message("Right cost: " + string(rightCost));
                show_debug_message("UpRight cost: " + string(upRightCost));
                show_debug_message("DownRight cost: " + string(downRightCost));*/
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>condition message</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(pauseMenuObj))
{
    if (exitTouched)
    {
        condMsgPos--;
        alarm[0]++;
        if (alarm[0] &gt; 30)
        {
            condAlpha -= 0.05;
        }
    }
    else
    {
        condMsgPos = y - 20;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invulnerable timer update</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (invulTimer &lt; invulLimit)
{
    invulTimer++;
    visible = !visible;
}
else
{
    visible = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="gasObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.gasMaskEnabled)
    global.airReduceMod = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="tarObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.moveSpeedMod = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="batObj">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Take damage</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (invulTimer &gt;= invulLimit)
{
    global.hearts--;
    invulTimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="shopkeepObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (!instance_exists(shopObj) &amp;&amp; !inShop)
{
    instance_create(0, 0, shopObj);
    inShop = true;
    show_debug_message("Created shop");
}*/

if (!instance_exists(dialogueObj) &amp;&amp; !inShop)
{
    instance_create(0, 0, dialogueObj);
    inShop = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="exitObj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check the player's condition when they reach the exit and display a message.

if (!exitTouched)
{
    exitTouched = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//debug data

if (debug_mode)
{
    draw_set_font(gameScreenFont);
    draw_set_colour(c_lime);
    draw_text(x - view_xview, y - 20 - view_yview, "&lt;" + string(x) + ", " + string(y) + "&gt;");
    
    //player grid location
    draw_text(x - view_xview, y - 40 - view_yview, "Grid Loc &lt;" + string(floor(x / TILE_SIZE)) + ", " + string(floor(y / TILE_SIZE)) + "&gt;");
    draw_text(x - view_xview, y - 60 - view_yview, "Steps: " + string(stepCounter));
    
    //collision check
   /* if (place_meeting(x + MOVE_SPEED, y, rockObj))
    {
        draw_text(x - view_xview, y + TILE_SIZE - view_yview, "Rock Loc &lt;" + string(floor((x + TILE_SIZE) / TILE_SIZE)) + ", " + string(floor(bbox_bottom / TILE_SIZE)) + "&gt;");
    }
    
    if (place_meeting(x - MOVE_SPEED, y, rockObj))
    {
        draw_text(x - view_xview, y + TILE_SIZE - view_yview, "Rock Loc &lt;" + string(floor((x - TILE_SIZE / 2) / TILE_SIZE)) + ", " + string(floor(bbox_bottom / TILE_SIZE)) + "&gt;");
    }*/
}

if (exitTouched &amp;&amp; !global.inRestArea)
{
    draw_set_font(gameScreenFont);
    
    if (global.oxygen &lt; 21 &amp;&amp; global.hearts &gt; 1)
    {
        draw_text_colour(x - view_xview, condMsgPos - view_yview, condMsg, c_white, c_white, skyBlue, skyBlue, condAlpha);
    }
    else if (global.hearts &lt; 2 &amp;&amp; global.oxygen &gt; 20)
    {
        draw_text_colour(x - view_xview, condMsgPos - view_yview, condMsg, c_white, c_white, c_red, c_red, condAlpha);
    }
    else if (global.hearts &lt; 2 &amp;&amp; global.oxygen &lt; 21)
    {
        draw_text_colour(x - view_xview, condMsgPos - view_yview, condMsg, skyBlue, skyBlue, skyBlue, c_red, condAlpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var body_sprite = global.avatarOptions[global.avatarChoice, 0];
var outfit_sprite = global.avatarOptions[global.avatarChoice, global.costumeChoice];


image_delay +=1;
if(image_delay &gt;= 10){
    current_image += 1;
    if(current_image &gt;= global.spritesPerDirection){
        current_image = 0;
    }
    image_delay = 0;
}

current_frame = current_image + (4 * facing_direction);
draw_sprite_stretched(body_sprite, current_frame, self.x, self.y, 64, 64);
draw_sprite_stretched(outfit_sprite, current_frame, self.x, self.y, 64, 64);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
