<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*create a 2D array to display item &amp; upgrade information.
index 0 = sprite, index 1 = item name, index 2 = item desc, index 3 = price, index 4 = boolean state 
(true = item is clicked, false = item not clicked) 5 = current upgrade level.
 
The price scales up according to how far the player has advanced in the game. Both the tier
and the last level completed are factored in to the price. The prices in the itemList array
contain only the base price.

Formula for calculating item price: (base * tier) / 2
Formula for upgrading: +50% of the current cost per purchase.
 
 */

displayUpgradePage = false;       //may change to true if player frequently goes to this page.  
priceScale = global.tier * 0.5;

totalCost = 0;      //amount that player will spend if they confirm purchases.
  
itemList = 0;
upgradeList = 0;
meterList = 0;
maxRows = 2;        //changes depending on which window is being viewed.

tempInventory = ds_list_create();   //temporary inventory for purchasing items.
ds_list_copy(tempInventory, global.inventory);

//items
itemList[0, 0] = instance_create(0, 0, gasmaskObj); //gasmask_shop;
itemList[0, 1] = "Gas Mask";
itemList[0, 2] = "Protects you from poisonous gases!#Works once per level.";
itemList[0, 3] = 500;
itemList[0, 4] = false;

itemList[1, 0] = instance_create(0, 0, repellentObj); //repellent_shop;
itemList[1, 1] = "Repellent";
itemList[1, 2] = "No enemies will appear.#Works once per level.";
itemList[1, 3] = 1200;
itemList[1, 4] = false;

itemList[2, 0] = instance_create(0, 0, horseshoeObj); //horseshoe_shop;
itemList[2, 1] = "Horseshoe";
itemList[2, 2] = "Immediately restores 3 of your hearts#if you die in the mine, and this item is destroyed.";
itemList[2, 3] = 5000;
itemList[2, 4] = false;

//upgrades
upgradeList[0, 0] = instance_create(0, 0, axeUpgradeObj);
upgradeList[0, 1] = "Pickaxe Upgrade";
upgradeList[0, 2] = "Destroy rocks faster!";
upgradeList[0, 3] = 1000;
upgradeList[0, 4] = false;
upgradeList[0, 5] = global.pickaxeLevel;

upgradeList[1, 0] = instance_create(0, 0, lanternUpgradeObj);
upgradeList[1, 1] = "Lantern Upgrade";
upgradeList[1, 2] = "See more of the map!";
upgradeList[1, 3] = 1000;
upgradeList[1, 4] = false;
upgradeList[1, 5] = global.lanternLevel;

upgradeList[2, 0] = instance_create(0, 0, tankUpgradeObj);
upgradeList[2, 1] = "Oxygen Tank Upgrade";
upgradeList[2, 2] = "Consume less oxygen!";
upgradeList[2, 3] = 1000;
upgradeList[2, 4] = false;
upgradeList[2, 5] = global.oxygenLevel;

upgradeList[3, 0] = instance_create(0, 0, heartUpgradeObj);
upgradeList[3, 1] = "Heart Upgrade";
upgradeList[3, 2] = "Survive longer!";
upgradeList[3, 3] = 1000;
upgradeList[3, 4] = false;
upgradeList[3, 5] = global.heartLevel;

tempUpgradeValues = 0;
tempUpgradeValues[0] = global.pickaxeLevel;
tempUpgradeValues[1] = global.lanternLevel;
tempUpgradeValues[2] = global.oxygenLevel;
tempUpgradeValues[3] = global.heartLevel;


//position all of the objects
for (var i = 0; i &lt; array_height_2d(itemList); i++)
{
    itemList[i, 0].x = view_wview * 0.10 + (120 * i) + (itemList[i, 0].sprite_width * 0.25);
    itemList[i, 0].y = view_hview * 0.10 + (itemList[i, 0].sprite_height * 0.25);
}

for (var i = 0; i &lt; array_height_2d(upgradeList); i++)
{
    upgradeList[i, 0].x = view_wview * 0.10 + (upgradeList[i, 0].sprite_width * 0.25);
    upgradeList[i, 0].y = view_hview * 0.10 + (75 * i) + (upgradeList[i, 0].sprite_height * 0.25);
}

//meter. Each index (i) corresponds to an upgrade.
for (var i = 0; i &lt; array_height_2d(upgradeList); i++)
{
    for (var j = 0; j &lt; MAX_UPGRADE; j++)
    {
        meterList[i, j] = instance_create(upgradeList[i, 0].x + upgradeList[i, 0].sprite_width + (j * 70) + TILE_SIZE, 
        upgradeList[i, 0].y + (upgradeList[i, 0].sprite_height * 0.5) - 20, upgradeMeterObj);
        meterList[i, j].visible = false;
        
        //the first bar is always going to be full
        if (j == 0)
        {
            with (meterList[i, j])
            {
                image_index = 1;
            }
        }
    }
    
    //fill up any meters if player previously upgraded.
    var j = 1;
    switch(i)
    {
             
        case 0: //pickaxe upgrade
            while (j &lt; global.pickaxeLevel)
            {
                with (meterList[i, j])
                {
                    image_index = 1;
                }
                j++;
            }
            break;
            
        case 1: //lantern
            while (j &lt; global.lanternLevel)
            {
                with (meterList[i, j])
                {
                    image_index = 1;
                }
                j++;
            }
            break;
        
        case 2: //oxygen tank
            while (j &lt; global.oxygenLevel)
            {
                with (meterList[i, j])
                {
                    image_index = 1;
                }
                j++;
            }
            break;
            
        case 3: //heart level
            while (j &lt; global.heartLevel)
            {
                with (meterList[i, j])
                {
                    image_index = 1;
                }
                j++;
            }
            break;
    }
}





itemWindowColor = make_colour_rgb(128, 128, 255);
upgradeWindowColor = make_colour_rgb(255, 128, 128);

selectedItem = 0;   //used to display item info depending on what player taps.

//create selection icon
//selectionIcon = instance_create(itemList[0, 0].x, itemList[0, 0].y, selectionObj);

selectedRow = 0;
selectedCol = 0; //used to highlight tapped item

//page buttons
itemPageButton = instance_create(itemList[0, 0].x, itemList[0, 0].y - 50, itemPageBtnObj);
upgradePageButton = instance_create(itemPageButton.x + 120, itemPageButton.y, upgradePageBtnObj);
exitButton = instance_create(itemPageButton.x + 340, itemPageButton.y, exitShopBtnObj);
buyButton = instance_create(0, 0, buyBtnObj);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>check if max rows needs to change</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (displayUpgradePage == true)
{
    maxRows = 3;
    
    //show meters &amp; windows.
    for (var i = 0; i &lt; array_height_2d(meterList); i++)
    {
        for (var j = 0; j &lt; array_length_2d(meterList, i); j++)
        {
            meterList[i, j].visible = true;
        }
    }
    
    for (var i = 0; i &lt; array_height_2d(itemList); i++)
    {
        itemList[i, 0].visible = false;
    }
    
    for (var i = 0; i &lt; array_height_2d(upgradeList); i++)
    {
        upgradeList[i, 0].visible = true;       
    }
    
 
    
}
else
{
    maxRows = 1;
    
    //hide upgrade meters &amp; windows
    for (var i = 0; i &lt; array_height_2d(meterList); i++)
    {
        for (var j = 0; j &lt; array_length_2d(meterList, i); j++)
        {
            meterList[i, j].visible = false;
        }
    }
    
    for (var i = 0; i &lt; array_height_2d(upgradeList); i++)
    {
        upgradeList[i, 0].visible = false;
    }
    
    for (var i = 0; i &lt; array_height_2d(itemList); i++)
    {
        itemList[i, 0].visible = true;
    }
}

//update upgrade values
//global.pickaxeLevel = upgradeList[0, 5];
//global.lanternLevel = upgradeList[1, 5];
//global.oxygenLevel = upgradeList[2, 5];
//global.heartLevel = upgradeList[3, 5];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check where the player tapped.
if (displayUpgradePage == false)
    selectedRow = floor((mouse_y - view_hview * 0.25) / 100);
else
    selectedRow = floor((mouse_y - view_hview * 0.25) / 75);
    
selectedCol = floor((mouse_x - view_wview * 0.25) / 100);

if (selectedRow &lt; 0)
{
    selectedRow = 0;
}

if (selectedRow &gt; maxRows)
{
    selectedRow = maxRows;
} 

if (selectedCol &lt; 0)
{
    selectedCol = 0;
}

if (selectedCol &gt; 3)
{
    selectedCol = 3;
}

show_debug_message("Row: " + string(selectedRow));
show_debug_message("Col: " + string(selectedCol));

//find the item player tapped
if (!displayUpgradePage)
{
    for (var i = 0; i &lt; array_height_2d(itemList); i++)
    {
        if (mouse_x &gt;= itemList[i, 0].x &amp;&amp; mouse_x &lt;= itemList[i, 0].x + itemList[i, 0].sprite_width)
        {
            if (mouse_y &gt;= itemList[i, 0].y &amp;&amp; mouse_y &lt;= itemList[i, 0].y + itemList[i, 0].sprite_height)
            {               
                selectedItem = i;
                
                //if player previously tapped item, tapping it again purchases the item.
                if (itemList[selectedItem, 4] == true)
                {
                    if (ds_list_size(tempInventory) &gt;= MAX_ITEMS)
                    {
                        show_debug_message("Inventory full!");
                    }
                    //does player have enough cash?
                    else if (global.cash &lt; itemList[selectedItem, 3])
                    {
                        show_debug_message("Not enough cash!");
                    }
                    else
                    {
                        show_debug_message("Purchased " + itemList[selectedItem, 1]);
                        totalCost += itemList[selectedItem, 3];
                        //global.cash -= itemList[selectedItem, 3];
                        
                        //add item to inventory
                        switch (selectedItem)
                        {
                            case 0: //gas mask
                                ds_list_add(tempInventory, ITEMID_GASMASK);
                                break;
                                
                            case 1: //repellent
                                ds_list_add(tempInventory, ITEMID_REPELLENT);
                                break;
                                
                            case 2: //horseshoe
                                ds_list_add(tempInventory, ITEMID_HORSESHOE);
                                break;
                                
                            case 3: //charm
                                ds_list_add(tempInventory, ITEMID_CHARM);
                                break;
                        }
                    }
                }
                
                if (itemList[selectedItem, 4] == false)
                {
                    itemList[selectedItem, 4] = true;
                }
            }
            else
            {
                //this item was not tapped
                itemList[i, 4] = false;
            }
        }
        else
        {
            //this item was not tapped
            itemList[i, 4] = false;
        }
    }
}
else        //show upgrade page
{
    for (var i = 0; i &lt; array_height_2d(upgradeList); i++)
    {
        if (mouse_x &gt;= upgradeList[i, 0].x &amp;&amp; mouse_x &lt;= upgradeList[i, 0].x + upgradeList[i, 0].sprite_width)
        {
            if (mouse_y &gt;= upgradeList[i, 0].y &amp;&amp; mouse_y &lt;= upgradeList[i, 0].y + upgradeList[i, 0].sprite_height)
            {
                selectedItem = i;
                
                 //if player previously tapped upgrade, tapping it again purchases the upgrade.
                if (upgradeList[selectedItem, 4] == true)
                {
                    //is upgrade currently maxed out?
                    if (tempUpgradeValues[selectedItem] &gt;= MAX_UPGRADE)
                    {
                        show_debug_message("Upgrade is maxed out");
                    }
                    //does player have enough cash?
                    else if (global.cash &lt; upgradeList[selectedItem, 3])
                    {
                        show_debug_message("Not enough cash!");
                    }
                    else
                    {
                        show_debug_message("Purchased " + upgradeList[selectedItem, 1]);
                        totalCost += upgradeList[selectedItem, 3];
                        //global.cash -= upgradeList[selectedItem, 3];
                        //upgradeList[selectedItem, 5]++;
                        tempUpgradeValues[selectedItem]++;
                        
                        //add to meter
                        var j = 0;
                        var emptyMeterFound = false;
                        
                        while(j &lt; MAX_UPGRADE &amp;&amp; !emptyMeterFound)
                        {
                            with(meterList[selectedItem, j])
                            {
                                if (image_index == 0)   //empty meter frame
                                {
                                    image_index = 1;
                                    emptyMeterFound = true;
                                }
                            }
                            j++;
                        }
                        
                        //increase cost
                    }
                }
                
                if (upgradeList[selectedItem, 4] == false)
                {
                    upgradeList[selectedItem, 4] = true;
                }
            }
            else
            {
                //this upgrade was not tapped
                upgradeList[i, 4] = false;
            }
        }
        else
        {
            //this upgrade was not tapped
            upgradeList[i, 4] = false;
        }
    }
}

//button checks
if (mouse_x &gt;= itemPageButton.x &amp;&amp; mouse_x &lt;= itemPageButton.x + 100)
{
    if (mouse_y &gt;= itemPageButton.y &amp;&amp; mouse_y &lt;= itemPageButton.y + 20)
    {
        displayUpgradePage = false;
        selectedItem = 0;
        totalCost = 0;
        
        //reset the meter list
        for (var i = 0; i &lt; array_height_2d(meterList); i++)
        {
            for (var j = 0; j &lt; array_length_2d(meterList, i); j++)
            {
                with (meterList[i, j])
                {
                   image_index = 0;
                }
            }
        }
    }
}

if (mouse_x &gt;= upgradePageButton.x &amp;&amp; mouse_x &lt;= upgradePageButton.x + 100)
{
    if (mouse_y &gt;= upgradePageButton.y &amp;&amp; mouse_y &lt;= upgradePageButton.y + 20)
    {
        displayUpgradePage = true;
        selectedItem = 0;
        totalCost = 0;
        
        //update the meter list
        tempUpgradeValues[0] = global.pickaxeLevel;
        tempUpgradeValues[1] = global.lanternLevel;
        tempUpgradeValues[2] = global.oxygenLevel;
        tempUpgradeValues[3] = global.heartLevel;
        
        //fill up any meters if player previously upgraded.
        for (var i = 0; i &lt; array_height_2d(meterList); i++)
        {
            
            var j = 0;
            switch(i)
            {
                     
                case 0: //pickaxe upgrade
                    while (j &lt; tempUpgradeValues[0])
                    {
                        with (meterList[i, j])
                        {
                            image_index = 1;
                        }
                        j++;
                    }
                    break;
                    
                case 1: //lantern
                    while (j &lt; tempUpgradeValues[1])
                    {
                        with (meterList[i, j])
                        {
                            image_index = 1;
                        }
                        j++;
                    }
                    break;
                
                case 2: //oxygen tank
                    while (j &lt; tempUpgradeValues[2])
                    {
                        with (meterList[i, j])
                        {
                            image_index = 1;
                        }
                        j++;
                    }
                    break;
                    
                case 3: //heart level
                    while (j &lt; tempUpgradeValues[3])
                    {
                        with (meterList[i, j])
                        {
                            image_index = 1;
                        }
                        j++;
                    }
                    break;
              }
          } 
    }
}

if (mouse_x &gt;= buyButton.x &amp;&amp; mouse_x &lt;= buyButton.x + 100)
{
    if (mouse_y &gt;= buyButton.y &amp;&amp; mouse_y &lt;= buyButton.y + 20)
    {
        //which screen is the player on?
        if (!displayUpgradePage)
        {
            if (totalCost &lt;= global.cash)
            {
                global.cash -= totalCost;
                totalCost = 0;
                
                //make inventory changes permanent
                ds_list_copy(global.inventory, tempInventory);
            }
            else
            {
                //play buzzer sound; not enough cash.
                show_debug_message("Not enough cash!");
            }
        }
        else //on upgrade screen
        {
            if (totalCost &lt;= global.cash)
            {
                global.cash -= totalCost;
                totalCost = 0;
                
                //if player purchased oxygen or hearts, restore to full
                var restoreHearts = false;
                if (global.oxygenLevel &lt; tempUpgradeValues[2])
                {
                    //player upgraded oxygen; restore to max
                    global.oxygen = MAX_OXYGEN;
                }
                
                if (global.heartLevel &lt; tempUpgradeValues[3])
                {
                    restoreHearts = true;
                }
                
                //make upgrade changes permanent
                global.pickaxeLevel = tempUpgradeValues[0];
                global.lanternLevel = tempUpgradeValues[1];
                global.oxygenLevel = tempUpgradeValues[2];
                global.heartLevel = tempUpgradeValues[3];
                
                //restore hearts if applicable
                global.currentMaxHearts = MIN_HEARTS + global.heartLevel - 1;
                if (restoreHearts)
                {
                    global.hearts = global.currentMaxHearts;
                }
            }
            else
            {
                //play buzzer sound; not enough cash.
                show_debug_message("Not enough cash!");
            }
        }
    }
}

if (mouse_x &gt;= exitButton.x &amp;&amp; mouse_x &lt;= exitButton.x + 100)
{
    if (mouse_y &gt;= exitButton.y &amp;&amp; mouse_y &lt;= exitButton.y + 20)
    {
        //close shop &amp; destroy all instances
        for (var i = 0; i &lt; array_height_2d(itemList); i++)
        {
            with (itemList[i, 0])
            {
                instance_destroy();
            }
        }
        
        for (var i = 0; i &lt; array_height_2d(upgradeList); i++)
        {
            with (upgradeList[i, 0])
            {
                instance_destroy();
            }
        }
        
        for (var i = 0; i &lt; array_height_2d(upgradeList); i++)
        {
            for (var j = 0; j &lt; MAX_UPGRADE; j++)
            {
                with (meterList[i, j])
                {
                    instance_destroy();
                }
            }
        }
        
        itemList = 0;
        upgradeList = 0;
        meterList = 0;
        totalCost = 0;
        
        //remove buttons
        with (itemPageButton) instance_destroy();
        with (upgradePageButton) instance_destroy();
        with (exitButton) instance_destroy();
        with (buyButton) instance_destroy();
        
        //remove temp list
        if (ds_exists(tempInventory, ds_type_list))
        {
            ds_list_destroy(tempInventory);
        }
        
        //kill the shop.
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(gameScreenFont);

if (displayUpgradePage == false)
{
       
    draw_set_colour(itemWindowColor);
    draw_set_alpha(0.5);
    
    //draw 8 rectangles
    for (var i = 0; i &lt; 2; i++)
    {
        for (var j = 0; j &lt; 4; j++)
        {
            draw_rectangle(view_wview * 0.10 + (120 * j), view_hview * 0.10 + (120 * i), view_wview * 0.10 + (120 * j) + 100, view_hview * 0.10 + (120 * i) + 100, 0);
        }
    }
    
    //display current inventory
    draw_set_alpha(1);
    draw_set_colour(c_white);
    
    var itemYPos = view_hview * 0.75;
    draw_text(view_wview * 0.10, view_hview * 0.75, "Backpack");
    
    //draw boxes where items will be placed.
    for (var i = 0; i &lt; MAX_ITEMS; i++)
    {
        draw_rectangle(view_wview * 0.10 + (i * 32) + 80, itemYPos, view_wview * 0.10 + (i * 32) + 112, itemYPos + 32, 1);
    }
    
    if(ds_list_size(tempInventory) &gt; 0)
    {
        var i = 0;
        var itemPos = 80;   
        while (i &lt; ds_list_size(tempInventory))
        {
            switch(ds_list_find_value(tempInventory, i))
            {
                case ITEMID_GASMASK: //gas mask
                    draw_sprite(gasmask, 0, view_wview * 0.10 + (i * 32) + itemPos, itemYPos);
                    break;
                    
                case ITEMID_REPELLENT: //repellent
                    draw_sprite(repellent, 0, view_wview * 0.10 + (i * 32) + itemPos, itemYPos);
                    break;
                    
                case ITEMID_HORSESHOE: //horseshoe
                    draw_sprite(horseshoe, 0, view_wview * 0.10 + (i * 32) + itemPos, itemYPos);
                    break;
                    
                case ITEMID_CHARM: //charm
                    draw_sprite(charm, 0, view_wview * 0.10 + (i * 32) + itemPos, itemYPos);
                    break;
            }
            
            i++;
        }
    }
    
    //display item description &amp; price
    
    draw_set_colour(c_aqua);
    
    if (global.tier &gt; 1)
    {
        draw_text(view_wview * 0.10, view_hview * 0.85, itemList[selectedItem, 1] + " - $" + string(floor(itemList[selectedItem, 3] * priceScale)));
    }
    else
    {
        draw_text(view_wview * 0.10, view_hview * 0.85, itemList[selectedItem, 1] + " - $" + string(itemList[selectedItem, 3]));
    }
    
    draw_set_colour(c_white);
    draw_text(view_wview * 0.10, view_hview * 0.90, itemList[selectedItem, 2]);
    
    //draw selection box at selected item's location
    draw_set_colour(c_red);
    draw_rectangle(view_wview * 0.10 + (120 * selectedCol), view_hview * 0.10 + (120 * selectedRow), view_wview * 0.10 + (120 * selectedCol) + 100, view_hview * 0.10 + (120 * selectedRow) + 100, 1);
}
else    //show upgrades
{
   
    
    draw_set_colour(upgradeWindowColor);
    draw_set_alpha(0.5);
    
    draw_rectangle(view_wview * 0.10, view_hview * 0.10,  view_wview * 0.90, view_hview * 0.90, 0);
    
    //display upgrades, description &amp; price
    draw_set_alpha(1);
    draw_set_colour(c_aqua);
    
     
    draw_text(view_wview * 0.25, view_hview * 0.91, upgradeList[selectedItem, 1] + " - $" + string(upgradeList[selectedItem, 3]));  //name &amp; price
    
    draw_set_colour(c_white);
    draw_text(view_wview * 0.25, view_hview * 0.95, upgradeList[selectedItem, 2]);  //desc
    
    //draw selection box at selected item's location
    draw_set_colour(c_red);
    draw_rectangle(view_wview * 0.10, view_hview * 0.10 + (75 * selectedRow), view_wview * 0.10 + 100, view_hview * 0.10 + (75 * selectedRow) + 80, 1);
    
}

//display cash
draw_set_colour(c_white);
draw_sprite(coin, 0, view_wview / 1.5, view_hview * 0.93);
draw_text(view_wview / 1.5 + 25, view_hview * 0.93, string(global.cash));

//display total cost
if (totalCost &gt; 0)
{
    draw_set_colour(c_red);
    draw_sprite(coin, 0, view_wview / 1.5, view_hview * 0.90);
    draw_text(view_wview / 1.5 + 25, view_hview * 0.90, "-" + string(totalCost));
}

if (totalCost &gt; global.cash)
{
    draw_set_colour(c_red);
    draw_text(view_wview / 1.5, view_hview * 0.88, "Not enough cash!");
}




//display items
/*if(ds_list_size(global.inventory) &gt; 0)
{
    var i = 0;
    var itemPos = 100;   
    while (i &lt; ds_list_size(global.inventory))
    {
        switch(ds_list_find_value(global.inventory, i))
        {
            case ITEMID_GASMASK: //gas mask
                draw_sprite(gasmask, 0, (i * 32) + itemPos, view_hview - 48);
                break;
                
            case ITEMID_REPELLENT: //repellent
                draw_sprite(repellent, 0, (i * 32) + itemPos, view_hview - 48);
                break;
                
            case ITEMID_HORSESHOE: //horseshoe
                draw_sprite(horseshoe, 0, (i * 32) + itemPos, view_hview - 48);
                break;
                
            case ITEMID_CHARM: //charm
                draw_sprite(charm, 0, (i * 32) + itemPos, view_hview - 48);
                break;
        }
        
        i++;
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
